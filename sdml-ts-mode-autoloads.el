;;; sdml-ts-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from flycheck_sdml-mode-abbrev.el

(register-definition-prefixes "flycheck_sdml-mode-abbrev" '("sdml-mode-abbrev-"))


;;; Generated autoloads from sdml-mode.el

(autoload 'sdml-mode "sdml-mode" "\
A major mode for editing SDML (Simple Domain Modeling Language) files.

This major mode will, by default, enable the following minor modes:

- `abbrev-mode'
- `prettify-symbols-mode' (see `sdml-mode-prettify-symbols-alist')
- `tree-sitter-mode'
- `sdml-mode-hl-mode'
- `sdml-mode-indent-mode'
- `sdml-mode-ctags-mode'

  Key bindings:
  \\{sdml-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.sdml?\\'" . sdml-mode))
(register-definition-prefixes "sdml-mode" '("sdml-mode-"))


;;; Generated autoloads from sdml-mode-abbrev.el

(register-definition-prefixes "sdml-mode-abbrev" '("sdml-mode-abbrev-"))


;;; Generated autoloads from sdml-mode-cli.el

(register-definition-prefixes "sdml-mode-cli" '("sdml-mode-cli-"))


;;; Generated autoloads from sdml-mode-ctags.el

(autoload 'sdml-mode-ctags-mode "sdml-mode-ctags" "\
Minor mode to provide tagging of SDML source.

Key bindings:
  {sdml-mode-ctags-mode-map}

This is a minor mode.  If called interactively, toggle the
`Sdml-Mode-Ctags mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sdml-mode-ctags-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "sdml-mode-ctags" '("sdml-mode-ctags-"))


;;; Generated autoloads from sdml-mode-hl.el

(autoload 'sdml-mode-hl-mode "sdml-mode-hl" "\
Minor mode to provide highlighting of SDML source.

This is a minor mode.  If called interactively, toggle the
`Sdml-Mode-Hl mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sdml-mode-hl-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "sdml-mode-hl" '("sdml-mode-"))


;;; Generated autoloads from sdml-mode-indent.el

(autoload 'sdml-mode-indent-mode "sdml-mode-indent" "\
Minor mode to provide indentation when editing SDML source.

This is a minor mode.  If called interactively, toggle the
`Sdml-Mode-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sdml-mode-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "sdml-mode-indent" '("sdml-mode-indent-"))


;;; Generated autoloads from sdml-ts-mode.el

(autoload 'sdml-ts-mode "sdml-ts-mode" "\
A major mode for editing SDML (Simple Domain Modeling Language) files.

This major mode will, by default, enable the following minor modes:

- `abbrev-mode'
- `prettify-symbols-mode' (see `sdml-ts-mode-prettify-symbols-alist')
- `treesit-mode'
- `sdml-ts-mode-ctags-mode'

  Key bindings:
  \\{sdml-ts-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.sdml?\\'" . sdml-ts-mode))
(register-definition-prefixes "sdml-ts-mode" '("sdml-ts-mode-"))


;;; Generated autoloads from flycheck_sdml-mode-indent.el

(autoload 'sdml-mode-indent-mode "flycheck_sdml-mode-indent" "\
Minor mode to provide indentation when editing SDML source.

This is a minor mode.  If called interactively, toggle the
`Sdml-Mode-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sdml-mode-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "flycheck_sdml-mode-indent" '("sdml-mode-indent-"))


;;; Generated autoloads from flycheck_sdml-mode-hl.el

(autoload 'sdml-mode-hl-mode "flycheck_sdml-mode-hl" "\
Minor mode to provide highlighting of SDML source.

This is a minor mode.  If called interactively, toggle the
`Sdml-Mode-Hl mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sdml-mode-hl-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "flycheck_sdml-mode-hl" '("sdml-mode-"))



;;; Generated autoloads from flycheck_sdml-mode.el

(autoload 'sdml-mode "flycheck_sdml-mode" "\
A major mode for editing SDML (Simple Domain Modeling Language) files.

This major mode will, by default, enable the following minor modes:

- `abbrev-mode'
- `prettify-symbols-mode' (see `sdml-mode-prettify-symbols-alist')
- `tree-sitter-mode'
- `sdml-mode-ctags-mode'

  Key bindings:
  \\{sdml-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.sdml?\\'" . sdml-mode))
(register-definition-prefixes "flycheck_sdml-mode" '("sdml-mode-"))


;;; Generated autoloads from flycheck_sdml-ts-mode-fold.el

(register-definition-prefixes "flycheck_sdml-ts-mode-fold" '("sdml-ts-mode-fold-rule-set"))


;;; Generated autoloads from sdml-ts-mode-fold.el

(register-definition-prefixes "sdml-ts-mode-fold" '("sdml-ts-mode-fold-rule-set"))


;;; End of scraped data

(provide 'sdml-ts-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; sdml-ts-mode-autoloads.el ends here
